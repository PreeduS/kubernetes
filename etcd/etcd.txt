
# for each node

ETCD_NAME=a.example.com
INTERNAL_IP=1.1.1.1
INITIAL_CLUSTER=a.example.com=https://1.1.1.1:2380,b.example.com=https://2.2.2.2:2380,c.example.com=https://3.3.3.3:2380                # all nodes


cat << EOF > /etc/systemd/system/etcd.service
[Unit]
Description=etcd key-value store
Documentation=https://github.com/etcd-io/etcd
# After=network.target

[Service]

ExecStart=/usr/bin/etcd \\
    --name ${ETCD_NAME} \\
    --cert-file=/etc/etcd/kubernetes.pem \\
    --key-file=/etc/etcd/kubernetes-key.pem \\
    --peer-cert-file=/etc/etcd/kubernetes.pem \\
    --peer-key-file=/etc/etcd/kubernetes-key.pem \\
    --trusted-ca-file=/etc/etcd/ca.pem \\
    --peer-client-cert-auth \\
    --client-cert-auth \\
    --initial-advertise-peer-urls https://${INTERNAL_IP}:2380 \\
    --listen-peer-urls https://${INTERNAL_IP}:2380 \\
    --listen-client-urls https://${INTERNAL_IP}:2379,https://127.0.0.1:2379 \\
    --advertise-client-urls https://${INTERNAL_IP}:2379 \\


Restart=on-failuare
RestartSec=5
    
    
###  ??
User=etcd
Type=notify
Environment=ETCD_DATA_DIR=/var/lib/etcd
Environment=ETCD_NAME=%m
ExecStart=/usr/bin/etcd
Restart=always
RestartSec=10s
LimitNOFILE=40000
###



[Install]
WantedBy=multi-user.target

EOF



sudo systemctl daemon-reload
sudo systemctl enable etcd
sudo systemctl start etcd
sudo systemctl status etcd

# test
sudo ETCDCTL_API=3 etcdctl member list \
    --endpoints=https://127.0.0.1:2379 \
    --ca-cert=/etc/etcd/ca.pem \
    --cert=/etc/etcd/kubernetes.pem \
    --key=/etc/etcd/kubernetes-key.pem 
    
    


----------------------------------------





----------------------------------------
# https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/configuration.md

Bootstrapping: 
1. Static
- As we know the cluster members, their addresses and the size of the cluster before starting, we can use an offline bootstrap configuration by setting the initial-cluster flag.

- Note that the URLs specified in initial-cluster are the advertised peer URLs, i.e. they should match the value of initial-advertise-peer-urls on the respective nodes.
- etcd listens on listen-client-urls to accept client traffic. etcd member advertises the URLs specified in advertise-client-urls to other members, proxies, clients. 
- The command line parameters starting with --initial-cluster will be ignored on subsequent runs of etcd. If the configuration needs changes later, see the runtime configuration guide(etcdctl).

2. Discovery
- In a number of cases, the IPs of the cluster peers may not be known ahead of time. This is common when utilizing cloud providers or when the network uses DHCP
In these cases, rather than specifying a static configuration, use an existing etcd cluster to bootstrap a new one. This process is called "discovery".

There two methods that can be used for discovery:

2.1. etcd discovery
2.2. DNS discovery
---

--initial-advertise-peer-urls, --initial-cluster, --initial-cluster-state, and --initial-cluster-token flags are used in bootstrapping (static bootstrap, discovery-service bootstrap or runtime reconfiguration) 
a new member, and ignored when restarting an existing member.




# --initial-advertise-peer-urls
- List of this member's peer URLs to advertise to the rest of the cluster.          
- Own host ip ?         
- ex: "http://example.com:2380, http://10.0.0.1:2380"


# --initial-cluster
- Initial cluster configuration for bootstrapping.
- default: "default=http://localhost:2380"
- The key is the value of the --name flag for each node provided. The default uses default for the key because this is the default for the --name flag.
- ex: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 


# --initial-cluster-state
- Initial cluster state ("new" or "existing"). Set to new for all members present during initial static or DNS bootstrapping.
- If this option is set to existing, etcd will attempt to join the existing cluster. 



# --initial-cluster-token
- Initial cluster token for the etcd cluster during bootstrap. 
- default: "etcd-cluster"


---

# --listen-peer-urls
- List of URLs to listen on for peer traffic. This flag tells the etcd to accept incoming requests from its peers on the specified scheme://IP:port combinations. 
- Multiple URLs may be used to specify a number of addresses and ports to listen on. The etcd will respond to requests from any of the listed addresses and ports.
- Own host ip ?             
- ex: "http://10.0.0.1:2380"        



# --listen-client-urls
- save as listen-peer-urls but accepts incoming requests from the clients instead of peers.
- ex: "http://10.0.0.1:2379, http://localhost:2379"

---

# --advertise-client-urls 
- List of this member's client URLs to advertise to the rest of the cluster. These URLs can contain domain names.
- Own host ip ?
- ex; http://10.0.0.1:2379          # no localhost, may cause proxy loops


---

# --data-dir
- Path to the data directory.
- default: "${name}.etcd"


# --wal-dir
- Path to the dedicated wal directory (logging). If this flag is set, etcd will write the WAL files to the walDir rather than the dataDir.
- default: ""



---

# Deprecated --ca-file and --peer-ca-file flags, since v2.1.

# --cert-file
- Path to the client server TLS cert file.
- default: ""           
- ex: /etc/etcd/kubernetes.pem

# --key-file
- Path to the client server TLS key file.
- default: ""
- ex: /etc/etcd/kubernetes-key.pem

# --peer-cert-file
- Path to the peer server TLS cert file. This is the cert for peer-to-peer traffic, used both for server and client.
- default: ""
- ex: /etc/etcd/kubernetes.pem

# --peer-key-file
- Path to the peer server TLS key file. This is the key for peer-to-peer traffic, used both for server and client.
- default: ""
- ex: /etc/etcd/kubernetes-key.pem


# --trusted-ca-file
- Path to the client server TLS trusted CA cert file.
- default: ""
- ex: /etc/etcd/ca.pem

# --peer-trusted-ca-file
- Path to the peer server TLS trusted CA file.
- default: ""
- ex: /etc/etcd/ca.pem


---

# --client-cert-auth
- Enable client cert authentication.
- default: false

# --peer-client-cert-auth
- Enable peer client cert authentication.
- default: false

----------------------------------------


etcdctl put mykey "this is awesome"
etcdctl get mykey














----------------------------------------
for instance in worker-0 worker-1 worker-2; do
    echo "test: ${instance}"
done


ssh user@host <<ENDSSH
#commands to run on remote host
ENDSSH






